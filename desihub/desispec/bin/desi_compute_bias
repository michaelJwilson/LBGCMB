#!/usr/bin/env python


import sys,string
import astropy.io.fits as pyfits
import argparse
import numpy as np
from pkg_resources import resource_exists, resource_filename

from desiutil.log import get_logger
from desispec.preproc import read_ccd_calibration, _parse_sec_keyword, _overscan


    

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
description="Compute a master bias from a set of raw data bias images",
epilog='''This is simply a median of the input raw images.'''
)
parser.add_argument('-i','--image', type = str, default = None, required = True, nargs="*",
                    help = 'path of image fits files')
parser.add_argument('-o','--outfile', type = str, default = None, required = True,
                    help = 'output median image filename')
parser.add_argument('--camera',type = str, required = True,
                    help = 'camera name BX,RX,ZX with X from 0 to 9')


args        = parser.parse_args()
log = get_logger()


# copy logic of preproc.py for calibration file
calibration_data = None
ccd_calibration_filename = None
if ccd_calibration_filename is None :
    srch_file = "data/ccd/ccd_calibration.yaml"
    if not resource_exists('desispec', srch_file):
        log.error("Cannot find CCD calibration file {:s}".format(srch_file))
    else :
        ccd_calibration_filename=resource_filename('desispec', srch_file)

  

log.info("read images ...")
images=[]
shape=None
for filename in args.image :
    log.info("reading %s"%filename)
    fitsfile=pyfits.open(filename)
    
    primary_header=fitsfile[0].header
    image_header=fitsfile[args.camera].header

    # subtract overscan region
    if ccd_calibration_filename is not None and  ccd_calibration_filename is not False :
        calibration_data = read_ccd_calibration(image_header, primary_header, ccd_calibration_filename)        
    else :
        calibration_data = None

    image=fitsfile[args.camera].data.astype("float64")

    if calibration_data and "AMPLIFIERS" in calibration_data :
        amp_ids=list(calibration_data["AMPLIFIERS"])
    else :
        amp_ids=['A','B','C','D']
    
    n0=image.shape[0]//2
    n1=image.shape[1]//2
    
    for a,amp in enumerate(amp_ids) :
        ii = _parse_sec_keyword(image_header['BIASSEC'+amp])
        overscan_image = image[ii].copy()
        overscan,rdnoise = _overscan(overscan_image)
        log.info("amp {} overscan = {}".format(amp,overscan))
        if ii[0].start < n0 and ii[1].start < n1 :
            image[:n0,:n1] -= overscan
        elif ii[0].start < n0 and ii[1].start >= n1 :
            image[:n0,n1:] -= overscan
        elif ii[0].start >= n0 and ii[1].start < n1 :
            image[n0:,:n1] -= overscan
        elif ii[0].start >= n0 and ii[1].start >= n1 :
            image[n0:,n1:] -= overscan
        
    
    if shape is None :
        shape=image.shape
    images.append(image.ravel())
    
    fitsfile.close()

log.info("compute median image ...")
images=np.array(images)
print(images.shape)
medimage=np.median(images,axis=0).reshape(shape)

log.info("write result in %s ..."%args.outfile)
pyfits.writeto(args.outfile,medimage,clobber="True")

log.info("done")
