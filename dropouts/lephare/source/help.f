c
      subroutine help(var)
      implicit none 
      INCLUDE 'out_unit.decl' 
      integer*4     lnblnk
      character*4096 var
c
c      If you want to give a name to the output screen file
      if(UO.eq.30)
     .      open(UO,file='/tmp/screenHelp.dat',status='unknown') 
c
      if (var(1:lnblnk(var)) .eq. 'sedtolib') then
        write(UO,*) '-> sedtolib                                      '
        write(UO,*) '   builds a SED library from  ASCII SED list     '
        write(UO,*) '  -c configuration file (CHAR, full pathname)    '
        write(UO,*) '  -t S(s):STAR/ Q(q):QSO/ G(g):GALAXY  LIBRARY   '
c
        write(UO,*) ' if -t S or s then                               '
        write(UO,*) '    -STAR_SED    : Filename with SED list        '
        write(UO,*) '                   (CHAR, full path)             '
        write(UO,*) '    -STAR_LIB    : Output library name           '
        write(UO,*) '                 (CHAR  ->$LEPHAREWORK/lib_bin/*)'
        write(UO,*) '    -STAR_FSCALE : Flux Scale (REAL, def: 1.)    '
c
        write(UO,*) ' if -t Q or q then                               '
        write(UO,*) '    -QSO_SED     : Filename with SED list        '
        write(UO,*) '                   (CHAR, full path)' 
        write(UO,*) '    -QSO_LIB     : Output library name           '
        write(UO,*) '                 (CHAR  ->$LEPHAREWORK/lib_bin/*)'
        write(UO,*) '    -QSO_FSCALE  : Flux Scale (REAL, def: 1.)    '
c
         write(UO,*) ' if -t G or g then                               '
         write(UO,*) '    -GAL_SED     : Filename with SED list        '
         write(UO,*) '                   (CHAR, full path)             '
         write(UO,*) '    -GAL_LIB     : Output library name           '
         write(UO,*) '                 (CHAR  ->$LEPHAREWORK/lib_bin/*)'
         write(UO,*) '    -GAL_FSCALE  : Flux Scale (REAL, def: 1.)    '
         write(UO,*) '    -SEL_AGE     : Filename including a list of  '
         write(UO,*) '                   selected ages(CHAR, def: NONE)'
c
      elseif (var(1:lnblnk(var)) .eq. 'filter') then   
         write(UO,*) '-> filter                                        '
         write(UO,*) '   builds a set of filters from a selected list  '
         write(UO,*) ' -c configuration file (CHAR, full pathname)     '
         write(UO,*) ' -FILTER_LIST : CHAR-String with filter names    '
         write(UO,*) '                separated by a comma and         '
         write(UO,*) '              included in $LEPHAREDIR/filt/*     '
         write(UO,*) ' -TRANS_TYPE  : Filter transmission type(INTEGER)'
         write(UO,*) '                0: Energy (default)              '
         write(UO,*) '                1: Nb photons                    '
         write(UO,*) ' -FILTER_FILE : output file with selected filters'
         write(UO,*) '             (CHAR,->$LEPHAREWORK/filt/)         '
c
      elseif (var(1:lnblnk(var)) .eq. 'filter_info') then
         write(UO,*) ' -> filter_info                                  '
         write(UO,*) '    writes infos about filters on screen         '
         write(UO,*) ' -f           : filter name                      '
         write(UO,*) '              CHAR, in $LEPHAREWORK/filt/        '
c
      elseif (var(1:lnblnk(var)) .eq. 'filter_extinc') then
         write(UO,*) ' -> filter_extinc                                '
      write(UO,*) '   computes atmospheric extinction [Ext:mag/airmass]'
      write(UO,*) '   & galactic extinction [Albda/Av & Albda/E(B-V)]  '
         write(UO,*) ' -FILTER_FILE : filter name                      '
         write(UO,*) '  or -f       CHAR, in $LEPHAREWORK/filt/        '
         write(UO,*) ' -EXT_CURV    : atmospheric extinction curve     '
         write(UO,*) '  or -e       CHAR, in $LEPHAREDIR/ext/          '
         write(UO,*) '                default NONE                     '
         write(UO,*) ' -GAL_CURV    : atmospheric extinction curve     '
         write(UO,*) '  or -g       CHAR, in $LEPHAREDIR/ext/          '
         write(UO,*) '                default CARDELLI LAW             '
         write(UO,*) '                (Cardelli et al., 1989, ApJ 345) '
         write(UO,*) ' -OUTPUT      : output file name                 '
         write(UO,*) '  or -o         CHAR, ->working directory        '
         write(UO,*) '                default NONE                     '
c
      elseif (var(1:lnblnk(var)) .eq. 'mag_star') then   
         write(UO,*) ' -> mag_star                                     '
         write(UO,*) '    builds the stellar magnitude library         '
         write(UO,*) ' -c configuration file (CHAR, full pathname)     '
         write(UO,*) ' -FILTER_FILE : input file with selected filters '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/filt/)       '
         write(UO,*) ' -MAGTYPE     : magnitude type (CHAR, AB or VEGA)'
         write(UO,*) ' -STAR_LIB_IN : input stellar library            '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/lib_bin/)    '
         write(UO,*) ' -STAR_LIB_OUT: output stellar magnitude library '
         write(UO,*) '             (CHAR,-> $LEPHAREWORK/lib_mag/)     '
         write(UO,*) ' -LIB_ASCII   : ASCII stellar magnitude library  '
         write(UO,*) '               (CHAR,-> working directory)       '
         write(UO,*) '               YES or NO (default)               '
c
      elseif (var(1:lnblnk(var)) .eq. 'mag_gal') then   
         write(UO,*) ' -> mag_gal                                      '
         write(UO,*) '    builds the QSO or GALAXY magnitude library   '
         write(UO,*) ' -c configuration file (CHAR, full pathname)     '
         write(UO,*) ' -t  Q(q): QSO / G(g): GALAXY  LIBRARY           '
         write(UO,*) ' -FILTER_FILE: input file with selected filters  '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/filt/)       '
         write(UO,*) ' -MAGTYPE    : magnitude type (CHAR, AB or VEGA) '
         write(UO,*) ' If -t G or g then                               '
         write(UO,*) ' -GAL_LIB_IN : input GALAXY library              '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/lib_bin/)    '
         write(UO,*) ' -GAL_LIB_OUT: output GALAXY magnitude library   '
         write(UO,*) '             (CHAR,-> $LEPHAREWORK/lib_mag/)     '
         write(UO,*) ' If -t Q or q then                               '
         write(UO,*) ' -QSO_LIB_IN : input QSO library                 '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/lib_bin/)    '
         write(UO,*) ' -QSO_LIB_OUT: output QSO magnitude library      '
         write(UO,*) '             (CHAR,-> $LEPHAREWORK/lib_mag/)     '
         write(UO,*) '                                                 '
         write(UO,*) ' -Z_STEP     : Dz, zmax, dzsup if (zmax>6)       '
         write(UO,*) '               (REAL, 3 values)                  '
         write(UO,*) ' -COSMOLOGY  : Ho, Omega_o, Lambda_o             '
         write(UO,*) '              (REAL, 3 values)                  '
         write(UO,*) '              (if Lambda_o>0->Omega_o+Lambda_o=1)'
         write(UO,*) ' -EXTINC_LAW : extinction law to be used         '
         write(UO,*) '             (CHAR, in $LEPHAREDIR/ext/*)        '
         write(UO,*) '               NONE (default)                    '
         write(UO,*) ' -EB_V       : reddening color excess values     '
         write(UO,*) '               (REAL with < 50 values)           '
         write(UO,*) '               0. (default)                      '
         write(UO,*) ' -MOD_EXTINC : model range to apply extinction   '
         write(UO,*) '               (INTEGER, 2 values)               '
         write(UO,*) '               0,0 (default)                     '
         write(UO,*) ' -LIB_ASCII  : ASCII stellar magnitude library   '
         write(UO,*) '               (CHAR,-> working directory)       '
         write(UO,*) '               YES or NO (default)               '
c
      elseif (var(1:lnblnk(var)) .eq. 'zphot') then   
         write(UO,*) ' -> zphot                                        '
         write(UO,*) '    photometric reshifts from an input catalogue '
         write(UO,*) ' -c configuration file (CHAR, full pathname)     '
         write(UO,*) ' *********     MAIN OPTIONS         *************'
         write(UO,*) ' -CAT_IN     : Input photometric catalogue       '
         write(UO,*) '               (CHAR, full path)                 '
         write(UO,*) ' -INP_TYPE   : Input values                      '
         write(UO,*) '               (CHAR, FLUX (F) or MAGNITUDE (M)) '
         write(UO,*) ' -FILTER_FILE: Input file with selected filters  '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/filt/)       '
         write(UO,*) ' -ZPHOTLIB   : Input Libraries                   '
         write(UO,*) '             (CHAR, in $LEPHAREWORK/lib_mag/)    '
         write(UO,*) '                maximum of 3 libraries with      '
         write(UO,*) '                different types (S/Q/G)          '
         write(UO,*) ' -PARA_OUT   : file name with output parameters  '
         write(UO,*) '               to be written (CHAR, full path)   '
         write(UO,*) ' *********     SECONDARY OPTIONS    *************'
         write(UO,*) ' -CAT_MAG    : Input catalogue info              '
         write(UO,*) '               (CHAR, AB or VEGA)                '
         write(UO,*) ' -CAT_TYPE   : format catalogue info             '
         write(UO,*) '               (CHAR, SHORT-default or LONG)    '
         write(UO,*) ' -ERR_SCALE  : Add mag errors in quadrature to   '
         write(UO,*) '               observed errors                   '
         write(UO,*) '              (REAL, =number of bands or filters)'
         write(UO,*) '               -1.0-default : not used           '
         write(UO,*) ' -CAT_OUT    : output catalogue name             '
         write(UO,*) '               (CHAR, full path)                 '
         write(UO,*) '              zphot.out-default -> in working dir'
         write(UO,*) ' -BD_SCALE   : Band used for model scaling       '
         write(UO,*) '               (INTEGER, [Sum(2^n); n=0->nbd-1 ])'
         write(UO,*) '               0-default : all band used         '
         write(UO,*) ' -GLB_CONTEXT: Forced context for all objects    '
         write(UO,*) '               for Chi^2 analysis                '
         write(UO,*) '               (INTEGER, [Sum(2^n); n=0->nbd-1 ])'
         write(UO,*) '               0 : all bands used                '
         write(UO,*) '              -1-default, used context per object'
         write(UO,*) ' *******   PRIOR  OPTIONS  for Models    ********'
         write(UO,*) ' -MASS_SCALE : Accepted Log(scaling mass) range  '
         write(UO,*) '               (REAL, 2 values min and max)      '
         write(UO,*) '               0.,0. default : not used          '
         write(UO,*) ' -MAG_ABS    : Accepted Absolute mag range       '
         write(UO,*) '               (REAL, 2 values)                  '
         write(UO,*) '               0.,0. default : not used          '
         write(UO,*) ' -MAG_REF    : Filter reference for MAG_ABS      '
         write(UO,*) '               (INTEGER, 0-default: not used)    '
         write(UO,*) ' -ZFORM_MIN : Lower age constraint based on zform'
         write(UO,*) '               (REAL, number = number of models) '
         write(UO,*) '               0.-default : not used             '
         write(UO,*) ' *********       OTHER  OPTIONS     *************'
         write(UO,*) ' -MABS_METHOD: Method used for absolute magnitude'
         write(UO,*) '               (INTEGER, 0-default)              '
         write(UO,*) '              0: mag(filter)      -> MABS(filter)'
         write(UO,*) '              1: mag(best filter) -> MABS(filter)'
         write(UO,*) '              2: mag(fixed filter)-> MABS(filter)'
         write(UO,*) '              3: MABS(filter) from model         '
         write(UO,*) ' -MABS_REF  : Fixed filter if MABS_METHOD=2      '
         write(UO,*) '              (INTEGER, 0-default : not used)    '
         write(UO,*) ' -Z_INTERP  : Redshift interpolation from Chi^2  '
         write(UO,*) '              (CHAR, YES or NO-default)          '
         write(UO,*) ' -DZ_WIN    : Width window for 2nd peak search   '
         write(UO,*) '              (REAL, 1 value from 0->zmax)       '
         write(UO,*) '              0.25-default                       '
         write(UO,*) ' -MIN_THRES : Lower theshold for 2nd peaks       '
         write(UO,*) '              (REAL, 1 value from 0->1)          '
         write(UO,*) '              0.1-default                        '
         write(UO,*) ' -PROB_INTZ : Probability in various Z intervals '
         write(UO,*) '              (REAL, nb values<50, even number)  '
         write(UO,*) '              0.-default : not used              '
         write(UO,*) ' -SPEC_OUT  : Output file with spectra           '
         write(UO,*) '              (CHAR, YES or NO-default)          '
         write(UO,*) ' -ZFIX      : Fixed Z and search best model      '
         write(UO,*) '              (CHAR, YES or NO-default)          '
         write(UO,*) ' -FAST_MODE : Reduces color spaces in libraries  '
         write(UO,*) '              (CHAR, YES or NO-default)          '
         write(UO,*) ' -COL_NUM   : Number of colors used              '
         write(UO,*) '              (INTEGER, 3-default: uses 4 filters'
         write(UO,*) ' -COL_SIGMA : Observed color errors in sigma     '
         write(UO,*) '              (REAL, 3.0-default: +/-3.sigma)    '
         write(UO,*) ' -COL_SEL   : Color combinations                 '
         write(UO,*) '              (CHAR, AND or OR-default)          '
c
      elseif (var(1:lnblnk(var)) .eq. 'mag_zform') then   
         write(UO,*) ' -> mag_zform                                    '
         write(UO,*) '    builds the GALAXY magnitude library with     '
         write(UO,*) '    PLE models with a fixed formation redshift   '
         write(UO,*) '   -> outputs interpolated to fit with Z-STEP    '
         write(UO,*) ' -c configuration file (CHAR, full pathname)     '
         write(UO,*) ' -FILTER_FILE: input file with selected filters  '
         write(UO,*) '               (CHAR, in $LEPHAREWORK/filt/)     '
         write(UO,*) ' -MAGTYPE    : magnitude type (CHAR, AB or VEGA) '
         write(UO,*) ' -GAL_LIB_IN : input GALAXY library              '
         write(UO,*) '               (CHAR, in $LEPHAREWORK/lib_bin/)  '
         write(UO,*) ' -GAL_LIB_OUT: output GALAXY magnitude library   '
         write(UO,*) '               (CHAR,-> $LEPHAREWORK/lib_mag/)   '
         write(UO,*) ' -Z_FORM     : Z formation for each SED in list  '
         write(UO,*) '               (REAL, with < 50 values)          '
         write(UO,*) ' -Z_STEP     : Dz, zmax, dzsup if (zmax>6)       '
         write(UO,*) '               (REAL, 3 values)                  '
         write(UO,*) ' -COSMOLOGY  : Ho, Omega_o, Lambda_o             '
         write(UO,*) '               (REAL, 3 values)                  '
         write(UO,*) '              (if Lambda_o>0->Omega_o+Lambda_o=1)'
         write(UO,*) ' -EXTINC_LAW : extinction law to be used         '
         write(UO,*) '               (CHAR, in $LEPHAREDIR/ext/*)      '
         write(UO,*) '               NONE (default)                    '
         write(UO,*) ' -EB_V       : reddening color excess values     '
         write(UO,*) '               (REAL with < 50 values)           '
         write(UO,*) '               0. (default)                      '
         write(UO,*) ' -MOD_EXTINC : model range to apply extinction   '
         write(UO,*) '               (INTEGER, 2 values)               '
         write(UO,*) '               0,0 (default)                     '
         write(UO,*) ' -LIB_ASCII  : ASCII stellar magnitude library   '
         write(UO,*) '               (CHAR,-> working directory)       '
         write(UO,*) '               YES or NO (default)               '
c
      endif   


      STOP
      return
      END
